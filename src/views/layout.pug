doctype html
html(lang="en")
  head
    meta(charset="UTF-8")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title Music Streaming
    link(rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css")
    style.
      body {
        background-color: #121212;
        color: #e5e5e5;
        font-family: 'Arial', sans-serif;
        display: flex;
        flex-direction: column;
        height: 100vh;
        margin: 0;
      }
      .navbar {
        background-color: #1db954;
        width: 100%;
        padding: 0.5rem 1rem;
      }
      .navbar-brand, .btn-login {
        color: #fff;
      }
      .btn-login {
        margin-left: auto;
      }
      .main-content {
        display: flex;
        flex: 1;
        overflow: hidden;
        margin-bottom: 60px; /* Space for footer */
      }
      .sidebar {
        background-color: #1db954;
        width: 200px;
        height: 100%;
        padding-top: 20px;
        display: flex;
        flex-direction: column;
      }
      .sidebar a {
        color: #fff;
        padding: 10px 15px;
        text-align: left;
        text-decoration: none;
        display: block;
      }
      .sidebar a:hover {
        background-color: #1ed760;
      }
      .content {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
      }
      .card {
        background-color: #282828;
        border: none;
        border-radius: 8px;
      }
      .card img {
        border-radius: 8px;
      }
      .card-body {
        color: #b3b3b3;
      }
      .card-title {
        color: #fff;
      }
      .btn-primary {
        background-color: #1db954;
        border: none;
      }
      .btn-primary:hover {
        background-color: #1ed760;
      }
      footer.audio-player {
        position: fixed;
        bottom: 0;
        width: 100%;
        background-color: #1db954;
        padding: 10px;
        box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        align-items: center;
        z-index: 1000;
      }
      footer.audio-player .controls {
        display: flex;
        align-items: center;
        width: 100%;
      }
      footer.audio-player .controls button {
        background: none;
        border: none;
        color: #fff;
        font-size: 1.5rem;
        margin: 0 10px;
      }
      footer.audio-player .controls input[type="range"] {
        flex: 1;
      }
      footer.audio-player .controls .time {
        color: #fff;
        font-size: 0.8rem;
        margin: 0 10px;
      }
      footer.audio-player audio {
        display: none;
      }

  body
    nav.navbar.navbar-dark
      a.navbar-brand(href="#") Music Streaming
      button.btn.btn-login(type="button") Login

    .main-content
      .sidebar
        ul.nav.flex-column
          li.nav-item.active
            a.nav-link(href="/" data-page="home") Home
              span.sr-only (current)
          li.nav-item
            a.nav-link(href="/authors" data-page="authors") Authors
          li.nav-item
            a.nav-link(href="/genres" data-page="genres") Genres
          li.nav-item
            a.nav-link(href="/musics" data-page="musics") Songs
          li.nav-item
            a.nav-link(href="/playlists" data-page="playlists") Playlists
          li.nav-item
            a.nav-link(href="#" data-page="library") Library
          li.nav-item
            #{t('sidebar.vietnamese')}

      .content
        block content 
        
    footer.audio-player
      audio#main-audio-player(controls)
        | Your browser does not support the audio element.
      .controls
        button#prev-btn(type="button") &lt;&lt;
        button#play-pause-btn(type="button") Play
        button#next-btn(type="button") &gt;&gt;
        .time
          span#current-time 00:00
          span#duration / 00:00
        input#progress(type="range" min="0" value="0")
        input#volume(type="range" min="0" max="1" step="0.01" value="1")

    script(src="https://code.jquery.com/jquery-3.5.1.slim.min.js")
    script(src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js")
    script.
      document.addEventListener('DOMContentLoaded', () => {
        const audioPlayer = document.getElementById('main-audio-player');
        const playPauseBtn = document.getElementById('play-pause-btn');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const progress = document.getElementById('progress');
        const volume = document.getElementById('volume');
        const currentTimeElem = document.getElementById('current-time');
        const durationElem = document.getElementById('duration');

        let isPlaying = false;

        function updateTime() {
          const currentTime = audioPlayer.currentTime;
          const duration = audioPlayer.duration;
          currentTimeElem.textContent = formatTime(currentTime);
          durationElem.textContent = ` / ${formatTime(duration)}`;
          progress.value = (currentTime / duration) * 100;
        }

        function formatTime(seconds) {
          const minutes = Math.floor(seconds / 60);
          const secs = Math.floor(seconds % 60);
          return `${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
        }

        function loadPlayerState() {
          const savedUrl = localStorage.getItem('audioUrl');
          const savedTime = localStorage.getItem('audioTime');
          const savedVolume = localStorage.getItem('audioVolume');
          const savedIsPlaying = localStorage.getItem('audioIsPlaying') === 'true';

          if (savedUrl) {
            audioPlayer.src = savedUrl;
            audioPlayer.currentTime = savedTime ? parseFloat(savedTime) : 0;
            audioPlayer.volume = savedVolume ? parseFloat(savedVolume) : 1;
            isPlaying = savedIsPlaying;
            if (isPlaying) {
              audioPlayer.play();
              playPauseBtn.textContent = 'Pause';
            } else {
              playPauseBtn.textContent = 'Play';
            }
          }
        }

        function savePlayerState() {
          localStorage.setItem('audioUrl', audioPlayer.src);
          localStorage.setItem('audioTime', audioPlayer.currentTime);
          localStorage.setItem('audioVolume', audioPlayer.volume);
          localStorage.setItem('audioIsPlaying', isPlaying);
        }

        window.updateAudioPlayer = function (url) {
          if (audioPlayer.src !== url) {
            audioPlayer.src = url;
          }
          audioPlayer.play();
          isPlaying = true;
          playPauseBtn.textContent = 'Pause';
          savePlayerState();
        }

        playPauseBtn.addEventListener('click', () => {
          if (isPlaying) {
            audioPlayer.pause();
            playPauseBtn.textContent = 'Play';
          } else {
            audioPlayer.play();
            playPauseBtn.textContent = 'Pause';
          }
          isPlaying = !isPlaying;
          savePlayerState();
        });

        prevBtn.addEventListener('click', () => {
          // Logic for previous track
        });

        nextBtn.addEventListener('click', () => {
          // Logic for next track
        });

        progress.addEventListener('input', () => {
          const seekTime = (progress.value / 100) * audioPlayer.duration;
          audioPlayer.currentTime = seekTime;
          savePlayerState();
        });

        volume.addEventListener('input', () => {
          audioPlayer.volume = volume.value;
          savePlayerState();
        });

        // Save state every second
        setInterval(savePlayerState, 1000);

        audioPlayer.addEventListener('timeupdate', updateTime);

        loadPlayerState();

        // Handle AJAX content loading and preserve the footer
        document.querySelectorAll('a[data-page]').forEach(anchor => {
          anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const url = this.getAttribute('href');

            fetch(url)
              .then(response => response.text())
              .then(html => {
                const newContent = document.createElement('div');
                newContent.innerHTML = html;

                // Preserve footer and update only the main content
                const newMainContent = newContent.querySelector('.container').innerHTML;
                const currentMainContent = document.querySelector('.container');
                currentMainContent.innerHTML = newMainContent;

                window.history.pushState({ path: url }, '', url);
              })
              .catch(error => console.error('Error loading page:', error));
          });
        });

        window.addEventListener('popstate', (e) => {
          if (e.state && e.state.path) {
            fetch(e.state.path)
              .then(response => response.text())
              .then(html => {
                const newContent = document.createElement('div');
                newContent.innerHTML = html;

                // Preserve footer and update only the main content
                const newMainContent = newContent.querySelector('.container').innerHTML;
                const currentMainContent = document.querySelector('.container');
                currentMainContent.innerHTML = newMainContent;
              })
              .catch(error => console.error('Error loading page:', error));
          }
        });
      });
